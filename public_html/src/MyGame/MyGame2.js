/* * File: MyGame.js * This is the logic of our game. *//*jslint node: true, vars: true *//*global gEngine, Scene, GameObjectset, TextureObject, Camera, vec2,  FontRenderable, SpriteRenderable, LineRenderable,  GameObj, Mygameect, Mygame *//* find out more about jslint: http://www.jslint.com/help.html */"use strict";  // Operate in Strict mode such that variables must be declared before used!function MyGame2() {//    if(last != null)delete last;    this.kMinionSprite = "assets/minion_sprite.png";    this.kPlatformTexture = "assets/platform.png";    this.kWallTexture = "assets/wall.png";    this.kTargetTexture = "assets/target.png";    this.kParticleTexture = "assets/particle.png";    this.kBackGround = "assets/back.png";    this.kDoor = "assets/door.png";    this.kladder = "assets/ladder.png";    this.kKey = "assets/key.png";    this.kPaper = "assets/tips.png";    this.kMinion = "assets/shadow01.png";    this.kNet = "assets/net.png";    this.kGun = "assets/gun.png";    this.kbullet = "assets/bullet.png";    this.kNetTrack = "assets/track.png";    this.kRip = "assets/rip.png";    this.kelevator = "assets/elevator.png";    this.kSide = "assets/side.png";    this.kLight = null;    //music    this.kBgClip = "assets/sounds/BGClip.mp3";    this.kfindzombie = "assets/sounds/findzombie.wav";    this.kChest = "assets/chest.png";    // The camera to view the scene    this.mCamera = null;    this.mCamerasmall = null;    this.mMsg = null;    this.mShapeMsg = null;    this.mdirection = 0;    this.mAllObjs = null;    this.mElevator = null;    this.mAllParticles = null;    this.mBounds = null;    this.mCollisionInfos = [];    this.mHero = null;    //map items    this.mBack = null;    this.mDoor = null;    this.mDoor1 = null;    this.mchest = null;    this.mchest1 = null;    this.mNet = null;    this.mGun = null;    this.mgunstate = false;    this.mbullet = null;    this.mbulletmovespeedflag = 0;    this.mbulletflag = 0;    this.mbulletdirection = 0;    this.mNetTrack = null;    this.ripNum = 0;    this.ripSet = [];    this.mTheLight = null;    this.mMonster = [];    this.mpaper = null;    this.mkey = null;    this.mCurrentObj = 0;    this.mTarget = null;    this.moving = true;    this.iskey = false;    this.top = false;    this.isChest0 = false;    this.isChest1 = false;    this.isNet = 0;    this.isGun = 0;    this.isNetTrackSet = false;    this.keyrandom = Math.floor(Math.random()*3);    this.keyPosition = [[135, 25],[20, 45],[100, 45]];}gEngine.Core.inheritPrototype(MyGame2, Scene);MyGame2.prototype.loadScene = function () {    gEngine.Textures.loadTexture(this.kMinionSprite);    gEngine.Textures.loadTexture(this.kPlatformTexture);    gEngine.Textures.loadTexture(this.kWallTexture);    gEngine.Textures.loadTexture(this.kTargetTexture);    gEngine.Textures.loadTexture(this.kParticleTexture);    gEngine.Textures.loadTexture(this.kBackGround);    gEngine.Textures.loadTexture(this.kDoor);    gEngine.Textures.loadTexture(this.kKey);    gEngine.Textures.loadTexture(this.kPaper);    gEngine.Textures.loadTexture(this.kMinion);    gEngine.Textures.loadTexture(this.kChest);    gEngine.AudioClips.loadAudio(this.kBgClip);    gEngine.AudioClips.loadAudio(this.kfindzombie);    gEngine.Textures.loadTexture(this.kNet);    gEngine.Textures.loadTexture(this.kGun);    gEngine.Textures.loadTexture(this.kbullet);    gEngine.Textures.loadTexture(this.kNetTrack);    gEngine.Textures.loadTexture(this.kRip);    gEngine.Textures.loadTexture(this.kelevator);    gEngine.Textures.loadTexture(this.kSide);};MyGame2.prototype.unloadScene = function () {    gEngine.Textures.unloadTexture(this.kMinionSprite);    gEngine.Textures.unloadTexture(this.kPlatformTexture);    gEngine.Textures.unloadTexture(this.kWallTexture);    gEngine.Textures.unloadTexture(this.kTargetTexture);    gEngine.Textures.unloadTexture(this.kParticleTexture);    gEngine.Textures.unloadTexture(this.kBackGround);    gEngine.Textures.unloadTexture(this.kDoor);    gEngine.Textures.unloadTexture(this.kKey);    gEngine.Textures.unloadTexture(this.kPaper);    gEngine.Textures.unloadTexture(this.kMinion);    gEngine.Textures.unloadTexture(this.kChest);    gEngine.Textures.unloadTexture(this.kNet);    gEngine.Textures.unloadTexture(this.kGun);    gEngine.Textures.unloadTexture(this.kbullet);    gEngine.Textures.unloadTexture(this.kNetTrack);    gEngine.AudioClips.unloadAudio(this.kfindzombie);    gEngine.Textures.unloadTexture(this.kRip);    gEngine.Textures.unloadTexture(this.kelevator);    gEngine.Textures.unloadTexture(this.kSide);};MyGame2.prototype.initialize = function () {    // Step A: set up the cameras    this.mCamera = new Camera(        vec2.fromValues(50, 0), // position of t                                                                                                       ``                                                                                                                                                                                                                                                                                                                                          he camera        100,                     // width of camera        [0, 0, 1024, 484]         // viewport (orgX, orgY, width, height)    );    this.mCamerasmall = new Camera(        vec2.fromValues(50, 45), // position of t                                                                                                       ``                                                                                                                                                                                                                                                                                                                                          he camera        200,                     // width of camera        [0, 390, 204, 96]         // viewport (orgX, orgY, width, height)    );    //to set the lights in the game world//    gEngine.DefaultResources.setGlobalAmbientColor([0.1, 0.1, 0.1, 0]);//    gEngine.DefaultResources.setGlobalAmbientIntensity(0.2);ad    this.kLight = this._createALight(        0,          //type        [-5,10,0],  //position        [0,0,0],    //direction        [1,1,1,1],  //color        30,         //far        5,          //near        5,          //inner        30,          //outer        2,          //intensity        1,    );    //this.mCamerasmall.setWCWidth(250);	this.kLight.mFar = 20;    this.kLight.mNear = 10;//    this.mCamera.setBackgroundColor([1, 0.8, 0.8, 0.5]);    // sets the background to gray    gEngine.AudioClips.playBackgroundAudio(this.kBgClip);    gEngine.DefaultResources.setGlobalAmbientIntensity(0);    this.mBack = new LightRenderable(this.kBackGround);    // this.mBack.setColor([0, 0, 0, 1]);  // No tinting    this.mBack.getXform().setPosition(50, 40);    this.mBack.getXform().setSize(200, 100);    this.mBack.addLight(this.kLight);//      door--entrance    this.mDoor = new LightRenderable(this.kDoor);    this.mDoor.setColor([0, 0.5, 1, 0]);  // No tinting    this.mDoor.getXform().setPosition(140, 7);    this.mDoor.getXform().setSize(8, 10);    this.mDoor.addLight(this.kLight);    //   this.mDoor.addLight(this.mTheLight);//      door--escape    this.mDoor1 = new LightRenderable(this.kDoor);    this.mDoor1.setColor([0, 0.5, 1, 0]);  // No tinting    this.mDoor1.getXform().setPosition(-30, 67);    this.mDoor1.getXform().setSize(8, 10);    this.mDoor1.addLight(this.kLight);    //other items in map    this.mkey = new LightRenderable(this.kKey);    switch (this.keyrandom) {        case 0 :            this.mkey.setColor([0, 0.5, 1, 0]);  // No tinting            this.mkey.getXform().setPosition(135, 25);            this.mkey.getXform().setSize(5, 6);            this.mkey.addLight(this.kLight);            break;        case 1 :            this.mkey.setColor([0, 0.5, 1, 0]);  // No tinting            this.mkey.getXform().setPosition(20, 45);            this.mkey.getXform().setSize(5, 6);            this.mkey.addLight(this.kLight);            break;        case 2 :            this.mkey.setColor([0, 0.5, 1, 0]);  // No tinting            this.mkey.getXform().setPosition(100, 45);            this.mkey.getXform().setSize(5, 6);            this.mkey.addLight(this.kLight);            break;    };    this.mchest = new LightRenderable(this.kChest);    this.mchest.setColor([0, 0.5, 1, 0]);  // No tinting    this.mchest.getXform().setPosition(-5, 65);    this.mchest.getXform().setSize(5, 6);    this.mchest.addLight(this.kLight);    //chest2    this.mchest1 = new LightRenderable(this.kChest);    this.mchest1.setColor([0, 0.5, 1, 0]);  // No tinting    this.mchest1.getXform().setPosition(10, 65);    this.mchest1.getXform().setSize(5, 6);    this.mchest1.addLight(this.kLight);    this.mNet = new LightRenderable(this.kNet);    this.mNet.setColor([0, 0.5, 1, 0]);  // No tinting    this.mNet.getXform().setPosition(10, -50);    this.mNet.getXform().setSize(5, 6);    this.mNet.addLight(this.kLight);    this.mGun = new LightRenderable(this.kGun);    this.mGun.setColor([0, 0.5, 1, 0]);  // No tinting    this.mGun.getXform().setPosition(10, -50);    this.mGun.getXform().setSize(5, 6);    this.mGun.addLight(this.kLight);    this.mbullet = new LightRenderable(this.kbullet);    this.mbullet.setColor([0, 0.5, 1, 0]);  // No tinting    this.mbullet.getXform().setPosition(20, -50);    this.mbullet.getXform().setSize(3, 3);    this.mbullet.addLight(this.kLight);    this.mNetTrack = new LightRenderable(this.kNetTrack);    this.mNetTrack.setColor([0, 0.5, 1, 0]);  // No tinting    this.mNetTrack.getXform().setPosition(10, -50);    this.mNetTrack.getXform().setSize(5, 5);    this.mNetTrack.addLight(this.kLight);    this.mpaper = new LightRenderable(this.kPaper);    this.mpaper.setColor([0, 0.5, 1, 0]);  // No tinting    this.mpaper.getXform().setPosition(0, -40);    this.mpaper.getXform().setSize(80, 15);    this.mHero = new Hero(this.kMinionSprite, this.kLight);    // this.mHero.getRenderable().addLight(this.mTheLight);    this.mAllObjs = new GameObjectSet();    this.mElevator = new GameObjectSet();    this.mAllParticles = new ParticleGameObjectSet();    this.mHero.getXform().setPosition(-15,70);    this.createBounds2();    this.createElevator();    this.mFirstObject = this.mAllObjs.size();    this.mCurrentObj = this.mFirstObject;    this.mAllObjs.addToSet(this.mHero);    this.mMsg = new FontRenderable("                   ");    this.mMsg.setColor([1, 1, 1, 1]);    this.mMsg.getXform().setPosition(-10, -40);    this.mMsg.setTextHeight(4);    this.mShapeMsg = new FontRenderable("Shape");    this.mShapeMsg.setColor([0, 0, 0, 1]);    this.mShapeMsg.getXform().setPosition(5, 73);    this.mShapeMsg.setTextHeight(2.5);    //minons initialize    var m = null;    m = new Minion(this.kMinion, -35,10,-40,-32 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 120,10,110,130,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, -10, 40, -15, 5,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 80,40,70,90 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 125,50,122,128 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 100,70,95,105 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 50,70,40,60 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    m = new Minion(this.kMinion, 220,70,15,30 ,this.kLight);    this.mAllObjs.addToSet(m);    this.mMonster.push(m);    //rips    var countRip = 4;    var tempCount = 0;    for(;tempCount<4;tempCount++){        var m = null;        m = new LightRenderable(this.kRip);        m.setColor([0, 0.5, 1, 0]);  // No tinting        m.getXform().setPosition(30, -50);        m.getXform().setSize(5, 5);        m.addLight(this.kLight);        this.ripSet.push(m);    }};// This is the draw function, make sure to setup proper drawing environment, and more// importantly, make sure to _NOT_ change any state.MyGame2.prototype.draw = function () {    // Step A: clear the canvas    //gEngine.Core.clearCanvas([0.9, 0.9, 0.9, 1.0]); // clear to light gray    this.mCamera.setupViewProjection();    //where is the item    //this.createSide();    this.mBack.draw(this.mCamera);    this.mchest.draw(this.mCamera);    this.mchest1.draw(this.mCamera);	    this.mbullet.draw(this.mCamera);    this.mNetTrack.draw(this.mCamera);    this.mDoor.draw(this.mCamera);    this.mDoor1.draw(this.mCamera);    this.mAllObjs.draw(this.mCamera);    this.mElevator.draw(this.mCamera);    // for now draw these ...    /*for (var i = 0; i<this.mCollisionInfos.length; i++)        this.mCollisionInfos[i].draw(this.mCamera); */    this.mCollisionInfos = [];    this.mTarget.draw(this.mCamera);    // only draw status in the main camera    //this.mShapeMsg.draw(this.mCamera);    this.mAllParticles.draw(this.mCamera);    this.mpaper.draw(this.mCamera);    this.mMsg.draw(this.mCamera);    this.mkey.draw(this.mCamera);    // for now draw these ...    /*for (var i = 0; i<this.mCollisionInfos.length; i++)        this.mCollisionInfos[i].draw(this.mCamera); */    this.mCollisionInfos = [];    var tempCount = 0;    for(;tempCount<4;tempCount++){        this.ripSet[tempCount].draw(this.mCamera);    }    this.mTarget.draw(this.mCamerasmall);    // only draw status in the main camera    this.mShapeMsg.draw(this.mCamerasmall);    this.mAllParticles.draw(this.mCamerasmall);    this.mpaper.draw(this.mCamerasmall);    this.mMsg.draw(this.mCamerasmall);    this.mkey.draw(this.mCamerasmall);		this.mNet.draw(this.mCamera);    this.mGun.draw(this.mCamera);};MyGame2.prototype.increasShapeSize = function(obj, delta) {    var s = obj.getRigidBody();    var r = s.incShapeSizeBy(delta);};// The Update function, updates the application state. Make sure to _NOT_ draw// anything from this function!MyGame2.kBoundDelta = 0.1;MyGame2.prototype.updateState = function(){    var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];    var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];    //the light with hero    this.kLight.mPosition[0] = xHero;	this.kLight.mPosition[1] = yHero;    this.mCamera.mCameraState.mCenter.mCurrentValue[0] = xHero;    this.mCamera.mCameraState.mCenter.mCurrentValue[1] = yHero;    if(!this.moving){    		this.mpaper.mXform.mPosition[0] = xHero;        this.mMsg.mXform.mPosition[0] = xHero-10;        this.mpaper.mXform.mPosition[1] = yHero-15;        this.mMsg.mXform.mPosition[1] = yHero-15;    }else{        this.mpaper.mXform.mPosition[1] = -100;        this.mMsg.mXform.mPosition[1] = -100;    }    //update the item's position    if(this.iskey){        this.mkey.mXform.mPosition[0] = xHero + -3;        this.mkey.mXform.mPosition[1] = yHero + 12;    }    if(this.isChest0){        this.mNet.mXform.mPosition[0] = xHero + 3;        this.mNet.mXform.mPosition[1] = yHero + 12;    }    if(this.isChest1){        this.mGun.mXform.mPosition[0] = xHero + 9;        this.mGun.mXform.mPosition[1] = yHero + 12;    }};MyGame2.prototype.update = function () {    var msg = "";    var that = this;    var moveStep = 0.3;    //detect the netTrack    if(this.isNetTrackSet){        var kill = this.NetTrack();        if(kill) this.isNetTrackSet = false;    }    //moving th elevator    this.elevatoraction(0,2,22);    this.elevatoraction(1,22,42);    this.elevatoraction(2,22,42);    this.elevatoraction(3,42,62);    // movving    this.updateState();    this.CrashIntoMonster();    this.chase();    if (gEngine.Input.isKeyPressed(gEngine.Input.keys.W)) {//        xCamera.incYPosBy(0.2);        if(this.moving){            this.mHero.mRenderComponent.mXform.incYPosBy(0.2);        }    }    if (gEngine.Input.isKeyClicked(gEngine.Input.keys.K)) {        //console.log(this.isNet);        if(this.isNet){            var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];            var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];            this.mNetTrack.mXform.mPosition[0] = xHero;            this.mNetTrack.mXform.mPosition[1] = yHero;            this.isNet -= 1;            if(this.isNet===0){                this.mNet.mXform.mPosition[0] = -40;                this.mNet.mXform.mPosition[1] = -40;                this.isChest0 = false;            }            this.isNetTrackSet = true;        }    }    if (gEngine.Input.isKeyClicked(gEngine.Input.keys.L)) {        //console.log(this.isNet);        if(this.isGun){            this.bulletmove();            this.isGun -= 1;            if(this.isGun===0){                this.mGun.mXform.mPosition[0] = -40;                this.mGun.mXform.mPosition[1] = -40;                this.isChest1 = true;            }            //this.isNetTrackSet = true;        }        this.mgunstate = true;    }    //move the bullet    this.bulletjudge();	    if (gEngine.Input.isKeyPressed(gEngine.Input.keys.A)) {//        xCamera.incXPosBy(-kWASDDelta);        if(this.moving){            this.mHero.mRenderComponent.mXform.mPosition[0]-=moveStep;            this.mdirection = -1;        }    }    if (gEngine.Input.isKeyPressed(gEngine.Input.keys.D)) {//        xCamera.incXPosBy(kWASDDelta);        if(this.moving){            this.mHero.mRenderComponent.mXform.mPosition[0]+=moveStep;            this.mdirection = 1;        }    }    // to interact with the item    if (gEngine.Input.isKeyClicked(gEngine.Input.keys.Space)) {        var hero = this.mAllObjs.mSet[77];        var floor = hero.floor;        var xNow = hero.mRenderComponent.mXform.mPosition[0];        switch(floor)        {            case 0:               if(this.moving && this.iskey===true){                    if((xNow>135)&&(xNow<145)){                        this.mMsg.mText = "You passed this part!! press 'space' to continue";                        this.iskey=true;                        var myGame2 = new MyGame();                        gEngine.Core.initializeEngineCore('GLCanvas', myGame2);                    }                }            case 1:                if((xNow>this.keyPosition[0][0]-5)&&(xNow<this.keyPosition[0][0]+5)&&this.iskey===false){                        //console.log(this.mkey);                        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];                        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];                        this.mkey.mXform.mPosition[0] = xHero + 20;                        this.mkey.mXform.mPosition[1] = yHero + 20;                        this.mkey.mXform.mScale[0] = 2.5;                        this.mkey.mXform.mScale[1] = 3;                        this.mMsg.mText = "You got the key! press 'space' to continue";                        this.moving = !this.moving;                        this.iskey=true;                    }else if((xNow>this.keyPosition[1][0]-5)&&(xNow<this.keyPosition[1][0]+5)&&this.iskey===true){                    this.moving = true;            };                break;            case 2:                if((xNow>this.keyPosition[2][0]-5)&&(xNow<this.keyPosition[2][0]+5)&&this.iskey===false){                        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];                        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];                        this.mkey.mXform.mPosition[0] = xHero + 20;                        this.mkey.mXform.mPosition[1] = yHero + 20;                        this.mkey.mXform.mScale[0] = 2.5;                        this.mkey.mXform.mScale[1] = 3;                        this.mMsg.mText = "You got the key! press 'space' to continue";                        this.moving = !this.moving;                        this.iskey=true;                    }else if((xNow>this.keyPosition[1][0]-5)&&(xNow<this.keyPosition[1][0]+5)&&this.iskey===false){                        //console.log(this.mkey);                        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];                        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];                        this.mkey.mXform.mPosition[0] = xHero + 20;                        this.mkey.mXform.mPosition[1] = yHero + 20;                        this.mkey.mXform.mScale[0] = 2.5;                        this.mkey.mXform.mScale[1] = 3;                        this.mMsg.mText = "You got the key! press 'space' to continue";                        this.moving = !this.moving;                        this.iskey=true;                    }else if((xNow>this.keyPosition[1][0]-5)&&(xNow<this.keyPosition[1][0]+5)&&this.iskey===true){                        this.moving = true;                    };                    break;            case 3:                 if(this.moving){                    if((xNow>-7)&&(xNow<-1)&&this.isChest0===false){                        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];                        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];                        this.mNet.mXform.mPosition[0] = xHero + 20;                        this.mNet.mXform.mPosition[1] = yHero + 20;                        this.mNet.mXform.mScale[0] = 4;                        this.mNet.mXform.mScale[1] = 4;                        this.mMsg.mText = "You have gotten the chest";                        this.moving = !this.moving;                        this.isChest0 = true;                        this.isNet = 3;                    }                    else if((xNow>7)&&(xNow<13)&&this.isChest1===false){                        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];                        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];                        this.mGun.mXform.mPosition[0] = xHero + 20;                        this.mGun.mXform.mPosition[1] = yHero + 20;                        this.mGun.mXform.mScale[0] = 4;                        this.mGun.mXform.mScale[1] = 4;                        this.mMsg.mText = "You have gotten the chest";                        this.moving = !this.moving;                        this.isChest1 = true;                        this.isGun = 3;                    }                }                else{//                    this.tipInfoOff();                    this.moving = !this.moving;                }                break;        }    }    var obj = this.mAllObjs.getObjectAt(this.mCurrentObj);    obj.getRigidBody().userSetsState();    //    this.mAllObjs.update(this.mCamera);    gEngine.Physics.processCollision(this.mAllObjs, this.mCollisionInfos);    gEngine.ParticleSystem.collideWithRigidSet(this.mAllObjs, this.mAllParticles);    this.mShapeMsg.setText(obj.getRigidBody().getCurrentState());};MyGame2.prototype.CrashIntoMonster = function(){    var xhero = this.mHero.getXform().getXPos();    var yhero = this.mHero.getXform().getYPos();    var i;    for(i=0;i<7;i++){        if((xhero - this.mMonster[i].getXform().getXPos())>=-5&&            (xhero - this.mMonster[i].getXform().getXPos())<=5&&            (yhero - this.mMonster[i].getXform().getYPos())>=-8&&            (yhero - this.mMonster[i].getXform().getYPos())<=8&&(this.moving=== true)){            this.mHero.mRenderComponent.mXform.mPosition[0] = -15;            this.mHero.mRenderComponent.mXform.mPosition[1] = 70;            this.isChest0 = false;            this.isChest1 = false;            this.isNet = 0;            this.isGun = 0;            this.mNetTrack.mXform.mPosition[0] = -100;        }    }};MyGame2.prototype.chase=function(){    var xhero = this.mHero.getXform().getXPos();    var yhero = this.mHero.getXform().getYPos();    var i;    for(i=0;i<7;i++){        if((xhero - this.mMonster[i].getXform().getXPos())>=-20&&            (xhero - this.mMonster[i].getXform().getXPos())<-5&&            (yhero - this.mMonster[i].getXform().getYPos())>=-5&&            (yhero - this.mMonster[i].getXform().getYPos())<=5){            this.mMonster[i].flag=-1;            gEngine.AudioClips.playACue(this.kfindzombie);        }        else if((xhero - this.mMonster[i].getXform().getXPos())>5&&            (xhero - this.mMonster[i].getXform().getXPos())<=20&&            (yhero - this.mMonster[i].getXform().getYPos())>=-5&&            (yhero - this.mMonster[i].getXform().getYPos())<=5){            gEngine.AudioClips.playACue(this.kfindzombie);            this.mMonster[i].flag=1;        }        else            this.mMonster[i].flag=0;    }};MyGame2.prototype.elevatoraction = function (n,ylow,yhigh) {    var ele1 = this.mAllObjs.mSet[n+73];    var ele1_h = ele1.mRenderComponent.mXform.mPosition[1];    if((ele1_h-yhigh)<0 && this.top===false){        ele1.mRenderComponent.mXform.mPosition[1]+=0.2;    }    if((ele1_h-yhigh)<0.001&&(ele1_h-yhigh)>0){        this.top = true;    }    if((ele1_h-ylow)>0 && this.top===true){        ele1.mRenderComponent.mXform.mPosition[1]-=0.2;    }    if((ele1_h-ylow)<0.0001){        this.top = false;    }};MyGame2.prototype.NetTrack = function(){    var xTrack = this.mNetTrack.mXform.mPosition[0];    var yTrack = this.mNetTrack.mXform.mPosition[1];    //console.log(xTrack,yTrack);    var i = 0;    var ripName = "";    for(i=0;i<7;i++){        if((xTrack - this.mMonster[i].getXform().getXPos())>=-5&&            (xTrack - this.mMonster[i].getXform().getXPos())<=5&&            (yTrack - this.mMonster[i].getXform().getYPos())>=-8&&            (yTrack - this.mMonster[i].getXform().getYPos())<=8){            this.mMonster[i].mRenderComponent.mXform.mPosition[0] = -50;            this.mMonster[i].mRenderComponent.mXform.mPosition[1] = -50;            this.mNetTrack.mXform.mPosition[0] = -50;            this.mNetTrack.mXform.mPosition[1] = -50;            this.ripSet[this.ripNum].mXform.mPosition[0] = xTrack;            this.ripSet[this.ripNum++].mXform.mPosition[1] = yTrack-1;            return true;        }    }    return false;};MyGame2.prototype._createALight = function (type, pos, dir, color, n, f, inner, outer, intensity, dropOff) {    var light = new Light();    light.setLightType(type);    light.setColor(color);    light.setXPos(pos[0]);    light.setYPos(pos[1]);    light.setZPos(pos[2]);    light.setDirection(dir);    light.setNear(n);    light.setFar(f);    light.setInner(inner);    light.setOuter(outer);    light.setIntensity(intensity);    light.setDropOff(dropOff);    light.setLightCastShadowTo(true);    return light;};MyGame2.prototype.bulletmove = function() {    if(this.mbulletflag === 0){        this.mbulletdirection = this.mdirection;        var xHero = this.mHero.mRenderComponent.mXform.mPosition[0];        var yHero = this.mHero.mRenderComponent.mXform.mPosition[1];        this.mbullet.mXform.mPosition[0] = xHero;        this.mbullet.mXform.mPosition[1] = yHero;        this.mbulletflag = 1;    }};MyGame2.prototype.BulletCrashInto = function(){    var xbullet = this.mbullet.mXform.mPosition[0];    var ybullet = this.mbullet.mXform.mPosition[1];    for(var i=0;i<7;i++){        if((xbullet - this.mMonster[i].getXform().getXPos())>=-5&&            (xbullet - this.mMonster[i].getXform().getXPos())<=5&&            (ybullet - this.mMonster[i].getXform().getYPos())>=-8&&            (ybullet - this.mMonster[i].getXform().getYPos())<=8){            this.mMonster[i].mRenderComponent.mXform.mPosition[0] = -50;            this.mMonster[i].mRenderComponent.mXform.mPosition[1] = -50;            this.mNetTrack.mXform.mPosition[0] = -50;            this.mNetTrack.mXform.mPosition[1] = -50;            this.mgunstate = false;            this.mbullet.mXform.mPosition[1] = -50;            this.mbullet.mXform.mPosition[0] = 20;            this.mbulletflag = 0;            return true;        }    }    if(xbullet>300||xbullet<-50){        this.mgunstate = false;        this.mbullet.mXform.mPosition[1] = -50;        this.mbullet.mXform.mPosition[0] = 20;        this.mbulletflag = 0;    }};MyGame2.prototype.bulletjudge = function(){    if(this.mgunstate === true)    {        if(this.mbulletmovespeedflag!==0)        {            this.mbulletmovespeedflag++;            if(this.mbulletmovespeedflag === 5)            {                this.mbulletmovespeedflag=0;            }        }        else if(this.mbulletflag === 1)        {            if(this.mbulletdirection === 1){                this.mbullet.mXform.mPosition[0] += 5;                this.mbulletmovespeedflag++;            }            else if(this.mbulletdirection === -1){                this.mbullet.mXform.mPosition[0] -= 5;                this.mbulletmovespeedflag++;            }        }        this.BulletCrashInto();    }};